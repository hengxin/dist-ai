sort votemap
sort inst
sort round
sort value
sort quorum
sort node

immutable constant none: round
immutable relation le(round, round)

axiom le(X,X)                        # Reflexivity
axiom le(X, Y) & le(Y, Z) -> le(X, Z)  # Transitivity
axiom le(X, Y) & le(Y, X) -> X = Y    # Anti-symmetry
axiom le(X, Y) | le(Y, X)             # Totality

immutable relation inst_le(inst, inst)

axiom inst_le(X,X)                        # Reflexivity
axiom inst_le(X, Y) & inst_le(Y, Z) -> inst_le(X, Z)  # Transitivity
axiom inst_le(X, Y) & inst_le(Y, X) -> X = Y    # Anti-symmetry
axiom inst_le(X, Y) | inst_le(Y, X)             # Totality

# proposers can propose the stop value to stop the algorithm
immutable constant stop: value

immutable relation member(node, quorum)
axiom forall Q1:quorum, Q2:quorum. exists N:node. member(N, Q1) & member(N, Q2)

mutable relation one_a(round)
mutable relation one_b_msg(node, round, votemap)
mutable relation left_round(node, round)
mutable relation joined_round(node, round)
mutable relation proposal(inst, round, value) # 2a
mutable relation active(round) # round R has received a quorum of 1b and can now propose new values
mutable relation vote(node, inst, round, value) # 2b
mutable relation decision(node, inst, round, value) # got 2b from a quorum
mutable function maxr(votemap,inst) : round
mutable function maxv(votemap,inst) : value

init !one_a(R)
init !one_b_msg(N,R1,M)
init !left_round(N,R)
init !joined_round(N,R)
init !proposal(I,R,V)
init !active(R)
init !vote(N,I,R,V)
init !decision(N,I,R,V)


transition send_1a(r:round)
  modifies one_a
  & old (
    r != none
  )
  & (forall A . one_a(A) <-> (A=r) | old(one_a(A)))

transition join_round(n:node, r:round, m:votemap)
  modifies one_b_msg, left_round, joined_round
  & old (
    & r != none
    & one_a(r)
    & !left_round(n,r)

    # find the maximal vote in a round less than r, for all instances
    & (forall I:inst. (
        ( maxr(m,I) = none & forall R,V. !(vote(n,I,R,V) & !le(r,R)) ) |
        ( vote(n,I,maxr(m,I),maxv(m,I)) & !le(r,maxr(m,I)) &
          forall R,V. vote(n,I,R,V) & !le(r,R) -> le(R,maxr(m,I)) )
    ))
  )
  & (forall A,B,C . one_b_msg(A,B,C) <-> (A=n & B=r & C=m) | old(one_b_msg(A,B,C)))
  & (forall A,B . joined_round(A,B) <-> (A=n & B=r) | old(joined_round(A,B)))
  & (forall A,R . left_round(A,R) <-> if A=n then old(left_round(n,R) | !le(r,R)) else old(left_round(A,R)))

transition receive_join_acks(r:round, q:quorum, m:votemap, im:inst)
  modifies proposal, active
  & old (
    & r != none
    & !active(r)
    & (forall N:node. member(N, q) -> joined_round(N,r))
    & (forall I:inst. (
        ( maxr(m,I) = none &
          forall N,R,V. !(member(N, q) & !le(r,R) & vote(N,I,R,V)) ) |
        ( (exists N,R,V.  member(N, q) & !le(r,R) & vote(N,I,R,V) & R = maxr(m,I) & V = maxv(m,I)) &
          (forall N,R,V.  member(N, q) & !le(r,R) & vote(N,I,R,V) -> le(R,maxr(m,I))) )
    ))
  )
  & (forall A . active(A) <-> (A=r) | old(active(A)))
  & (
    if old(forall I . !(maxr(m,I) != none & maxv(m,I) = stop)) then (
      (forall I,B,V . proposal(I,B,V) <->
        (if B=r then old(proposal(I, r, V) | (maxr(m,I) != none & V = maxv(m,I)))
            else old(proposal(I,B,V))
      ))
    ) else (
        & old(
            maxr(m,im) != none & maxv(m,im) = stop &
            forall I . (maxr(m,I) != none & maxv(m,I) = stop) -> le(maxr(m,I),maxr(m,im))
        )
        & (if old(exists I . !inst_le(I,im) & maxr(m,I) != none & !le(maxr(m,I), maxr(m,im)))
          then (
            (forall I,B,V . proposal(I,B,V) <->
              (if B=r then old(proposal(I, r, V) | (maxr(m,I) != none & V = maxv(m,I) &
                  !(maxv(m,I) = stop | (!inst_le(I,im) & !le(maxr(m,im),maxr(m,I))))))
                else old(proposal(I,B,V))
            ))
          ) else (
            (forall I,B,V . proposal(I,B,V) <->
              (if B=r then old(proposal(I, r, V) | (maxr(m,I) != none & V = maxv(m,I) &
                  !((I != im & maxv(m,I) = stop) | !inst_le(I,im))))
                else old(proposal(I,B,V))
            ))
          )
        )
      )
    )

transition propose(r:round, i:inst, v:value)
  modifies proposal
  & old(
    & r != none
    & active(r)
    & !proposal(i, r, V)
    & !(!inst_le(i,I) & proposal(I, r, stop))
    & !(!inst_le(I,i) & proposal(I,r,V) & v = stop)
  )
  & (forall A,B,C . proposal(A,B,C) <-> (A=i & B=r & C=v) | old(proposal(A,B,C)))


transition cast_vote(n:node, v:value, r:round, i:inst)
  modifies vote
  & old (
    & r != none
    & !left_round(n,r)
    & proposal(i, r, v)
  )
  & (forall A,B,C,D . vote(A,B,C,D) <-> (A=n & B=i & C=r & D=v) | old(vote(A,B,C,D)))


transition decide(n:node, r:round, v:value, q:quorum, i:inst)
  modifies decision
  & old (
    & r != none
    & (forall N . member(N, q) -> vote(N, i, r, v))
  )
  & (forall A,B,C,D . decision(A,B,C,D) <-> (A=n & B=i & C=r & D=v) | old(decision(A,B,C,D)))


# invariant property 1:
safety (
    decision(N1,I,R1,V1) &
    decision(N2,I,R2,V2)
) -> V1 = V2

# invariant property 2:
safety decision(N1,I1,R1,stop) & !inst_le(I2,I1) -> !decision(N2,I2,R2,V)


invariant proposal(I,R,V) -> active(R)

# proposals are unique per round
invariant proposal(I,R,V1) & proposal(I,R,V2) -> V1 = V2

# only vote for proposed values
invariant vote(N,I,R,V) -> proposal(I,R,V)

# decisions come from quorums of votes:
invariant forall R:round, V:value. (exists N:node. decision(N,I,R,V)) -> exists Q:quorum. forall N:node. member(N, Q) -> vote(N,I,R,V)

# properties of one_b_msg
invariant one_b_msg(N,R2,M) & maxr(M,I) = none & !le(R2,R1) -> !vote(N,I,R1,V2)
invariant one_b_msg(N,R, M) & maxr(M,I) != none -> !le(R,maxr(M,I)) & vote(N,I,maxr(M,I),maxv(M,I))
invariant one_b_msg(N,R, M) & maxr(M,I) != none & !le(R,ROTHER) & !le(ROTHER,maxr(M,I)) -> !vote(N,I,ROTHER,VOTHER)

# properties of none
# invariant !proposal(I,none,V)
invariant !vote(N,I,none,V)
# invariant !decision(N,I,none,V)
# invariant !one_b_msg(N,none,M)
# invariant !active(none)

# property of choosable and active: if R2>R1 is active and V is not proposed at I, then it's not choosable at R1
invariant forall I:inst, R1:round, R2:round, V:value, Q:quorum. (
    !le(R2,R1) & active(R2) & !proposal(I,R2,V) -> (
        exists N:node. member(N,Q) & left_round(N,R1) & !vote(N,I,R1,V)
    )
)

# property of stop values for the same round
invariant proposal(I1,R,stop) & !inst_le(I2,I1) -> !proposal(I2,R,V)

# properties of choosable and stop:
# if anything is proposed, then stop cannot be choosable at lower instances and lower rounds
invariant forall I1:inst, I2:inst, R1:round, R2:round, V:value, Q:quorum. (
    !le(R2,R1) & !inst_le(I2,I1) & proposal(I2,R2,V) -> (
        exists N:node. member(N,Q) & left_round(N,R1) & !vote(N,I1,R1,stop)
    )
)
# if stop is proposed, then nothing can be choosable at lower rounds and higher instances
invariant forall I1:inst, I2:inst, R1:round, R2:round, V:value, Q:quorum. (
    !le(R2,R1) & !inst_le(I2,I1) & proposal(I1,R2,stop) -> (
        exists N:node. member(N,Q) & left_round(N,R1) & !vote(N,I2,R1,V)
    )
)

# properties of joined_round, left_round
invariant joined_round(N,R2) & !le(R2,R1) -> left_round(N,R1)
invariant one_b_msg(N,R,M) -> joined_round(N,R)
