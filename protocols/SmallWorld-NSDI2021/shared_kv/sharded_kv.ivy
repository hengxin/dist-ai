#lang ivy1.6

type key
type value
type node

relation table(N:node, K:key, V:value)
relation owner(N:node, K:key)
relation transfer_msg(N:node, K:key, V:value)

init ~table(N, K, V)
init ~transfer_msg(N, K, V)
init owner(N1, K) & owner(N2, K) -> N1 = N2

action reshard = {
  local k: key, v: value, n_old: node, n_new: node {
    assume (table(n_old, k, v));

    table(n_old, k, v) := false;
    owner(n_old, k) := false;
    transfer_msg(n_new, k, v) := true;
  }
}


action recv_transfer_msg = {
  local n: node, k: key, v: value {
    assume (transfer_msg(n, k, v));

    transfer_msg(n, k, v) := false;
    table(n, k, v) := true;
    owner(n, k) := true;
  }
}


action put = {
  local n: node, k: key, v: value {
    assume owner(n, k);

    table(n, k, V) := (V = v);
  }
}

conjecture table(N1, K, V1) & table(N2, K, V2) -> N1 = N2 & V1 = V2

#conjecture owner(N1, K) & owner(N2, K) -> N1 = N2
#conjecture table(N, K, V) -> owner(N, K)

#conjecture ~(transfer_msg(N1, K, V) & owner(N2, K))
#conjecture transfer_msg(N1, K, V1) & transfer_msg(N2, K, V2) -> N1 = N2 & V1 = V2
