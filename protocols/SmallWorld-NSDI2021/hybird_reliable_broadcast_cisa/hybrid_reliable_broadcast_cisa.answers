
################################################################################
#
# Inductive conjecture
#
################################################################################

conjecture sent_msg_proj(N1) -> exists N2. sent_msg(N1,N2) # breaks decidability

conjecture sent_msg(N1,N2) -> sent_msg_proj(N1)
conjecture ~member_fs(N2) & ~member_fa(N2) & rcv_msg(N1,N2) -> sent_msg(N1,N2)
conjecture ~member_fi(N1) & ~member_fa(N1) & sent_msg_proj(N1) -> sent_msg(N1,N2) # symmetric where it should be
conjecture ~member_fs(N1) & ~member_fa(N1) & sent_msg(N1,N2) & ~rcv_init(N1) -> exists A. forall M. member_a(M,A) -> sent_msg_proj(M)
conjecture ~member_fs(N1) & ~member_fa(N1) & accept(N1) -> exists B. forall M. member_b(M,B) -> sent_msg_proj(M)
conjecture (exists A. forall M. member_a(M,A) & ~member_fs(M) & ~member_fa(M) -> sent_msg_proj(M)) -> (exists N. ~member_fs(N) & ~member_fa(N) & rcv_init(N))


