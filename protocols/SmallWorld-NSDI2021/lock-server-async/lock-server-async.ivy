#lang ivy1.6

type node

relation lock_msg(N:node)
relation grant_msg(N:node)
relation unlock_msg(N:node)
relation holds_lock(N:node)
relation server_holds_lock

init ~lock_msg(N)
init ~grant_msg(N)
init ~unlock_msg(N)
init ~holds_lock(N)
init server_holds_lock

action send_lock = {
  local n: node {
    lock_msg(n) := true;
  }
}

action recv_lock = {
  local n: node {
    assume (server_holds_lock);
    assume (lock_msg(n));

    server_holds_lock := false;
    lock_msg(n) := false;
    grant_msg(n) := true;
  }
}

action recv_grant = {
  local n: node {
    assume (grant_msg(n));

    grant_msg(n) := false;
    holds_lock(n) := true;
  }
}

action unlock = {
  local n: node {
    assume (holds_lock(n));

    holds_lock(n) := false;
    unlock_msg(n) := true;
  }
}

action recv_unlock = {
  local n: node {
    assume (unlock_msg(n));

    unlock_msg(n) := false;
    server_holds_lock := true;
  }
}

conjecture holds_lock(N1) & holds_lock(N2) -> N1 = N2

#conjecture grant_msg(N1) & grant_msg(N2) -> N1 = N2
#conjecture unlock_msg(N1) & unlock_msg(N2) -> N1 = N2

#conjecture ~(holds_lock(N1) & grant_msg(N2))
#conjecture ~(holds_lock(N1) & unlock_msg(N2))
#conjecture ~(grant_msg(N1) & unlock_msg(N2))

#conjecture ~(grant_msg(N) & server_holds_lock)
#conjecture ~(holds_lock(N) & server_holds_lock)
#conjecture ~(unlock_msg(N) & server_holds_lock)
