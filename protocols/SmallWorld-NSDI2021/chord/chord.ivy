#lang ivy1.6

#### From I4 repo
#### (modified)

#module ring_topology(carrier) = {
#    relation btw(X:carrier,Y:carrier, Z:carrier) # Y is on the acyclic path from X to Z

    # Axiom defining the btw relation - note it's not reflexive
    # not needed: axiom btw(X,Y,Z) -> X ~= Y & X ~= Z & Y ~= Z  # anti-reflexive
#    axiom btw(W, X, Y) & btw(W, Y, Z) -> btw(W, X, Z)  # transitive
#    axiom btw(W, X, Y) -> ~btw(W, Y, X)  # acyclic
#    axiom btw(W, X, Y) | btw(W, Y, X) | W=X | X=Y  # total
#    axiom (btw(X, Y, Z) & X ~= Z) -> btw(Y, Z, X)  # cyclic permutations
#}

#module nodeopology(t) = {
#    relation btw(X:t,Y:t,Z:t)

#    axiom btw(W, Y, Z) & btw(W, X, Y) -> btw(X, Y, Z)
#    property btw(W, X, Z) & btw(X, Y, Z) -> btw(W, X, Y)
#    property btw(W, X, Z) & btw(X, Y, Z) -> btw(W, Y, Z)
#    property btw(W, Y, Z) & btw(W, X, Y) -> btw(W, X, Z)
#    property W = X | btw(W, X, W)
#    property ~btw(X, X, Y)
#    property ~btw(X, Y, Y)
#    property btw(X,Y,Z) |  Y = Z |  btw(X,Z,Y)
#    property btw(X,Y,Z) |  Y = X |  btw(Y,X,Z)
#}

type node

#instantiate ring : ring_topology(node)
relation btw(X:node,Y:node, Z:node) # Y is on the acyclic path from X to Z

# Axiom defining the btw relation - note it's not reflexive
# not needed:
#axiom btw(X,Y,Z) -> X ~= Y & X ~= Z & Y ~= Z  # anti-reflexive
#axiom btw(W, X, Y) & btw(W, Y, Z) -> btw(W, X, Z)  # transitive
#axiom btw(W, X, Y) -> ~btw(W, Y, X)  # acyclic
#axiom btw(W, X, Y) | btw(W, Y, X) | W=X | X=Y | W=Y # total
#axiom (btw(X, Y, Z) & X ~= Z) -> btw(Y, Z, X)  # cyclic permutations


axiom btw(W, Y, Z) & btw(W, X, Y) -> btw(X, Y, Z)
axiom btw(W, X, Z) & btw(X, Y, Z) -> btw(W, X, Y)
axiom btw(W, X, Z) & btw(X, Y, Z) -> btw(W, Y, Z)
axiom btw(W, Y, Z) & btw(W, X, Y) -> btw(W, X, Z)
axiom W = X | btw(W, X, W)
axiom ~btw(X, X, Y)
axiom ~btw(X, Y, Y)
axiom btw(X,Y,Z) |  Y = Z |  btw(X,Z,Y)
axiom btw(X,Y,Z) |  Y = X |  btw(Y,X,Z)

relation a(X : node)                    # active set
relation s1(X : node, Y : node)         # first successor
relation in_s1(X : node)
relation s2(X : node, Y : node)         # second successor
relation in_s2(X : node)
relation p(X : node, Y : node)          # predecessor

individual org : node
individual other : node
axiom other ~= org

relation reach(X: node)
relation error(X: node)

init a(X) -> (X = org | X = other)
init (X = org | X = other) -> a(X)
init s1(X, Y) -> ((X = org & Y = other) | (X = other & Y = org))
init ((X = org & Y = other) | (X = other & Y = org)) -> s1(X, Y)
init in_s1(X) -> (X = org | X = other)
init (X = org | X = other) -> in_s1(X)
init ~s2(X, Y)
init ~in_s2(X)
init p(X, Y) -> ((X = org & Y = other) | (X = other & Y = org))
init ((X = org & Y = other) | (X = other & Y = org)) -> p(X, Y)
init reach(X) -> (X = org)
init (X = org) -> reach(X)
init ~error(X)

axiom ~error(X)

action join = {
  local x : node, y : node {
    assume ~a(x);
    assume a(y);
#    assume ~(a(Z) & btw(x, Z, y));
    assume ~btw(x, org, y);
#    assume in_s1(x) -> exists Y. s1(x, Y);
#    assume in_s2(x) -> exists Y. s2(x, Y);
    a(x) := true;
    s1(x, Y) := y = Y;
    in_s1(x) := true;
    s2(x, Y) := false;
    in_s2(x) := false;
    p(x, Y) := false;
  }
}

action stabilize = {
  local x : node, y : node, z : node {
    assume a(x);
    assume s1(x, y);
    assume a(y);
    assume p(y, z);
#    assume a(z);
    assume btw(x, z, y);
#    assume in_s1(x) -> exists Y. s1(x, Y);
#    assume in_s2(x) -> exists Y. s2(x, Y);
    s1(x, Z) := Z = z;
    in_s1(x) := true;
    s2(x, Y) := Y = y;
    in_s2(x) := true;
  }
}

action notify = {
  local x : node, y : node, z : node {
    assume a(x);
    assume s1(x, y);
    assume a(y);
    assume p(y, z) | ~p(y, X);
    assume btw(z, x, y);
    p(y, X) := X = x;
  }
}

action inherit = {
  local x : node, y : node, z : node {
    assume a(x);
    assume s1(x, y);
    assume a(y);
    assume s1(y, z);
#    assume in_s2(x) -> exists Y. s2(x, Y);
    s2(x, Z) := Z = z;
    in_s2(x) := true;
  }
}

action remove = {
  local x : node, y : node, z : node {
    assume a(x);
    assume s1(x, y);
    assume ~a(y);
    assume s2(x, z);
#    assume in_s1(x) -> exists Y. s1(x, Y);
#    assume in_s2(x) -> exists Y. s2(x, Y);
    s1(x, Z) := Z = z;
    in_s1(x) := true;
    s2(x, Y) := false;
    in_s2(x) := false;
  }
}

action fail = {
  local x : node {
    assume a(x);
    assume x ~= org; # assume origin node cannot fail
    # assume the last active successor of any does not fail
    assume (s1(Y, x)) -> in_s2(Y);
    assume (s1(Y, x) & s2(Y, Z)) -> a(Z);
    assume (s1(X, Y) & s2(X, x)) -> (Y ~= x & a(Y));
#    assume in_s1(x) -> exists Y. s1(x, Y);
#    assume in_s2(x) -> exists Y. s2(x, Y);
    a(x) := false;
    p(x, Y) := false;
    s1(x, Y) := false;
    in_s1(x) := false;
    s2(x, Y) := false;
    in_s2(x) := false;
#    assume (~s1(X, Y) | a(Y) | in_s2(X));
#    assume (~s1(X, Y) | a(Y) | ~s2(X, Z) | a(Z));
  }
}

action reach_org = {
  local x : node, y : node, z : node {
    assume (s1(x, y) & a(y) & reach(y)) | (s1(x, y) & ~a(y) & s2(x, z) & a(z) & reach(z));
    reach(x) := true;
  }
}

action remove_org = {
  local x : node, y : node, z : node {
    assume x ~= org;
    assume s1(x, y);
    assume (~a(y) | ~reach(y));
    assume ~a(y) -> (~s2(x, Z) | s2(x, z));
    assume (~a(y) & s2(x, z)) -> (~a(z) | ~reach(z));
#    assume (s1(x, y) & a(y) & ~reach(y)) | (s1(x, y) & ~a(y) & s2(x, z) & (a(z) & ~reach(z)));
    reach(x) := false;
  }
}

action test = {
  local x : node {
    assume (s1(X, Y) & a(Y) & reach(Y)) -> reach(X);
    assume (s1(X, Y) & ~a(Y) & s2(X, Z) & a(Z) & reach(Z)) -> reach(X);
    assume (btw(x, Y, org) & a(Y)) -> reach(Y);
    assume a(x);
    assume ~reach(x);
    assume in_s1(x) -> exists Y. s1(x, Y);
    assume in_s2(x) -> exists Y. s2(x, Y);
    error(x) := true;
  }
}

#conjecture s1(X,Y) -> in_s1(X)
#conjecture s2(X,Y) -> in_s2(X)
#conjecture reach(org)
#conjecture s1(X,Y) & s1(X,Z) -> Y=Z
#conjecture s2(X,Y) & s2(X,Z) -> Y=Z
#conjecture p(X,Y) & p(X,Z) -> Y=Z
#conjecture (a(X) | X ~= org)
#conjecture (a(X) | ~p(Y, X) | ~s1(X, Y)) 
#conjecture (a(X) | p(Y, X) | ~s1(X, Y)) 
#conjecture (a(X) | ~s2(X, Y)) 
#conjecture (in_s1(X) | ~a(X))
#conjecture (a(Y) | a(Z) | ~s1(X, Y) | ~s2(X, Z)) 
#conjecture (a(Y) | in_s2(X) | ~a(X) | ~s1(X, Y)) 
#conjecture p(A,B) -> a(A)

#conjecture a(X) & p(Y,X) & s1(X,Y) -> a(Y)
#conjecture (~btw(X, org, Y) | ~s1(X, Y)) 
#conjecture ~(s1(V0, V1) & V1 ~= org & s2(V0, V2) & btw(V0, org, V2))

# safety condition:
conjecture ~error(N)

template forall A:node . forall B:node . forall C:node . WILD

# these suffice:
#conjecture reach(org)
#conjecture s1(X,Y) & s1(X,Z) -> Y=Z
#conjecture (a(X) | X ~= org)
#conjecture (a(X) | ~p(Y, X) | ~s1(X, Y)) 
#conjecture (in_s1(X) | ~a(X))
#conjecture (a(Y) | a(Z) | ~s1(X, Y) | ~s2(X, Z)) 
#conjecture (a(Y) | in_s2(X) | ~a(X) | ~s1(X, Y)) 
#conjecture p(A,B) -> a(A)
#conjecture a(X) & p(Y,X) & s1(X,Y) -> a(Y)
#conjecture (~btw(X, org, Y) | ~s1(X, Y)) 
#conjecture ~(s1(V0, V1) & V1 ~= org & s2(V0, V2) & btw(V0, org, V2))
