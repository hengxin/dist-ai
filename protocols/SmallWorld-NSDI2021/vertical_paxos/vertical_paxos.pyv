sort round
sort value
sort quorum
sort config
sort node

immutable constant none: value

immutable relation le(round, round)

axiom le(X,X)                        # Reflexivity
axiom le(X, Y) & le(Y, Z) -> le(X, Z)  # Transitivity
axiom le(X, Y) & le(Y, X) -> X = Y    # Anti-symmetry
axiom le(X, Y) | le(Y, X)             # Totality

immutable relation member(node, quorum)
immutable relation quorumin(quorum, config)
axiom forall C:config, Q1:quorum, Q2:quorum. quorumin(Q1,C) & quorumin(Q2,C) -> exists N:node. member(N, Q1) & member(N, Q2)

mutable relation one_a(round,round)
mutable relation join_ack_msg(node, round, round, value)
mutable relation left_rnd(node, round)
mutable relation proposal(round, value) # 2a
mutable relation vote(node, round, value) # 2b
mutable relation decision(node, round, value) # got 2b from a quorum
mutable relation configure_round_msg(round, config)
mutable relation complete_msg(round) # message to the master that R is complete

immutable relation complete_of(config, round) # replaced the function
axiom complete_of(C,R1) & complete_of(C,R2) -> R1 = R2 # immutable, so we can use axiom

# highest complete round known to the master (master state)
mutable constant master_complete:round

init !one_a(R1,R2)
init !join_ack_msg(N,R1,R2,V)
init !left_rnd(N,R)
init !proposal(R,V)
init !vote(N,R,V)
init !decision(N,R,V)
init !configure_round_msg(R,C)
init !complete_msg(R)
init le(master_complete,R)

# master actions

transition configure_round(r:round, c:config)
  modifies configure_round_msg
  & old (
    & (forall C . !configure_round_msg(r,C))
    & le(master_complete, r)
    & complete_of(c,master_complete)
  )
  & (forall A,B . configure_round_msg(A,B) <->
      ((A=r & B=c) | old(configure_round_msg(A,B))))

transition mark_complete(r:round)
  modifies master_complete
  & old (
    complete_msg(r)
  )
  & (master_complete = (if !le(r,master_complete) then r else old(master_complete)))

transition send_1a(r:round, c:config, cr:round)
  modifies one_a
  & old (
      & configure_round_msg(r,c)
      & complete_of(c,cr)
  )
  & (forall A,R . one_a(A,R) <->
    (if A=r then old(one_a(r,R) | (le(cr,R) & !le(r,R))) else old(one_a(A,R)))
  )

transition join_round(n:node, r:round, rp:round, v: value)
  modifies left_rnd, join_ack_msg
  & old(
        & one_a(r,rp)
        & !left_rnd(n,r)
  )
  & (
    if old(forall V:value . !vote(n,rp,V))
    then (
      & (forall A,B,C,D . join_ack_msg(A,B,C,D) <->
          ((A=n & B=r & C=rp & D=none) | old(join_ack_msg(A,B,C,D))))
    ) else (
      & old(vote(n,rp,v))
      & (forall A,B,C,D . join_ack_msg(A,B,C,D) <->
          ((A=n & B=r & C=rp & D=v) | old(join_ack_msg(A,B,C,D))))
    )
  )
  & (forall A,R . left_rnd(A,R) <->
    (if A=n then old(left_rnd(n,R) | !le(r,R)) else old(left_rnd(A,R)))
  )

mutable function quorum_of_round(round) : quorum

transition propose(r:round, c:config, cr:round, maxr:round, v:value, w: value)
  modifies quorum_of_round, complete_msg, proposal
  #quorum_of_round(R) := *;

  # error None:98:12: symbol quorum_of_round is mentioned by the modifies clause, but is not referred to in the new state, so it will be havoced. supress this error by using quorum_of_round in a no-op.
  (forall R,Q . quorum_of_round(R) = Q | quorum_of_round(R) != Q) 

  & old(
        & configure_round_msg(r,c)
        & complete_of(c,cr)
        & (forall V . !proposal(r,V))
        & (forall R . le(cr,R) & !le(r,R) -> exists C. configure_round_msg(R,C))
        & (forall R,C . le(cr,R) & !le(r,R) & configure_round_msg(R,C) -> quorumin(quorum_of_round(R),C))
        & (forall N,R . le(cr,R) & !le(r,R) & member(N, quorum_of_round(R)) -> exists V:value. join_ack_msg(N,r,R,V))
        & ((v = none & forall N:node,MAXR:round,V:value.
                 !(le(cr,MAXR) & !le(r,MAXR) & member(N, quorum_of_round(MAXR)) & join_ack_msg(N,r,MAXR,V) & V != none)) |
                (v != none &
                (exists N:node. le(cr,maxr) & !le(r,maxr) & member(N, quorum_of_round(maxr)) & join_ack_msg(N,r,maxr,v) & v != none) &
                (forall N:node,MAXR:round,V:value.
                 (le(cr,MAXR) & !le(r,MAXR) & member(N, quorum_of_round(MAXR)) & join_ack_msg(N,r,MAXR,V) & V != none) -> le(MAXR,maxr))
               ))
  )
  & (if v = none then (
      & w != none
      & (forall A . complete_msg(A) <-> A=r | old(complete_msg(A)))
      & (forall A,B . proposal(A,B) <-> (A=r & B=w) | old(proposal(A,B)))
  ) else (
      & (forall A . complete_msg(A) <-> old(complete_msg(A)))
      & (forall A,B . proposal(A,B) <-> (A=r & B=v) | old(proposal(A,B)))
  ))

transition cast_vote(n:node, v:value, r:round)
  modifies vote
  & old (
      & v != none
      & !left_rnd(n,r)
      & proposal(r, v)
  )
  & (forall A,B,C . vote(A,B,C) <-> (A=n & B=r & C=v) | old(vote(A,B,C)))

transition decide(n:node, r:round, c:config, v:value, q:quorum)
  modifies decision, complete_msg
  & old (
      & v != none
      & configure_round_msg(r,c)
      & quorumin(q,c)
      & (forall N . member(N, q) -> vote(N, r, v))
  )
  & (forall A,B,C . decision(A,B,C) <-> (A=n & B=r & C=v) | old(decision(A,B,C)))
  & (forall A . complete_msg(A) <-> (A=r) | old(complete_msg(A)))

# safety property:
safety (
    decision(N1,R1,V1) &
    decision(N2,R2,V2)
) -> V1 = V2

# proposals are unique per round
#safety proposal(R,V1) & proposal(R,V2) -> V1 = V2

# configurations are unique per round
#safety configure_round_msg(R,C1) & configure_round_msg(R,C2) -> C1 = C2

# properties of one_a
#safety one_a(R,RP) -> !le(R,RP)
#safety one_a(R,RP) -> exists C. configure_round_msg(R,C)
#safety one_a(R,RP) & configure_round_msg(R,C) & complete_of(C,MINREL)-> le(MINREL,RP)

# only vote for proposed values
#safety vote(N,R,V) -> proposal(R,V)

# only propose for rounds if all lower rounds so far are configured
#safety proposal(R2,V) & le(R1,R2) -> exists C. configure_round_msg(R1,C)

# master_complete or complete_of rounds are either zero or complete_msg holds for them
#safety (R2 = master_complete | (configure_round_msg(R3,C) & complete_of(C,R2))) & !le(R2,R1) -> complete_msg(R2)
# rounds in complete_msg have all prior rounds configured
#safety complete_msg(R2) & le(R1,R2) -> exists C. configure_round_msg(R1,C)

# decisions come from configured rounds with  a quorum of votes:
#safety forall R:round, V:value. (exists N:node. decision(N,R,V)) -> exists C:config, Q:quorum. configure_round_msg(R,C) & quorumin(Q,C) & (forall N:node. member(N, Q) -> vote(N,R,V))

# properties of choosable and proposal
#safety forall R1:round, R2:round, V1:value, V2:value, Q:quorum, C:config.
#    !le(R2,R1) & proposal(R2,V2) & V1 != V2 & configure_round_msg(R1,C) & quorumin(Q,C) ->
#    (exists N:node. member(N,Q) & left_rnd(N,R1) & !vote(N,R1,V1))

# properties of configure_round messages
#safety configure_round_msg(R,C) & complete_of(C,MINREL) -> le(MINREL,R) & le(MINREL, master_complete)

# complete, choosable, decision
#safety complete_msg(RR) & !le(RR,R) & configure_round_msg(R,C) & quorumin(Q,C) &
#           !(exists N:node. member(N,Q) & left_rnd(N,R) & !vote(N,R,V))
#           -> (exists N:node. decision(N,RR,V))

# properties of none
#safety !proposal(R,none)
#safety !vote(N,R,none)
#safety !decision(N,R,none)

# properties of join_ack_msg
#safety join_ack_msg(N,R,RP,V) -> one_a(R,RP)
#safety join_ack_msg(N,R,RP,none) -> !vote(N,RP,V)
#safety join_ack_msg(N,R,RP,V) & V != none -> vote(N,RP,V)

# properties of left_rnd
#safety join_ack_msg(N,R2,RP,V) & !le(R2,R1) -> left_rnd(N,R1)


