#lang ivy1.7

type node
type response
type request

relation match(R:request, Q:response)

relation request_sent(N:node, R:request)
relation response_sent(N:node, Q:response)
relation response_received(N:node, Q:response)	

after init {
    request_sent(N,R) := false;
    response_sent(N,P) := false;
    response_received(N,P) := false;
}

action new_request(n: node, r: request) = {
    request_sent(n, r) := true;
}

action respond(n:node, r:request, p:response) = {
    require (request_sent(n,r));
    require (match(r,p));
    response_sent(n, p) := true;
}

action receive_response(n:node, p:response) = {
    require (response_sent(n,p));
    response_received(n, p) := true;
}

export new_request
export respond
export receive_response

# safety property
invariant [1000000] forall N,P. response_received(N,P) -> exists R. request_sent(N,R) & match(R,P)
