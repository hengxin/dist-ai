#lang ivy1.7

# from Paxos Made EPR

################################################################################
#
# Module for axiomatizing a total order
#
################################################################################

module total_order(r) = {
    axiom r(X,X)                        # Reflexivity
    axiom r(X, Y) & r(Y, Z) -> r(X, Z)  # Transitivity
    axiom r(X, Y) & r(Y, X) -> X = Y    # Anti-symmetry
    axiom r(X, Y) | r(Y, X)             # Totality
}

################################################################################
#
# Types, relations and functions describing state of the network
#
################################################################################

type round
type value
type quorum
type config
type node

individual none: value

relation le(X:round, Y:round)
instantiate total_order(le)

relation member(N:node, Q:quorum)
relation quorumin(Q:quorum, C:config)
axiom forall C:config, Q1:quorum, Q2:quorum. quorumin(Q1,C) & quorumin(Q2,C) -> exists N:node. member(N, Q1) & member(N, Q2)

relation one_a(R1:round,R2:round)
relation join_ack_msg(N:node, R1:round, R2:round, V:value)
relation left_rnd(N:node, R:round)
relation proposal(R:round, V:value) # 2a
relation vote(N:node, R:round, V:value) # 2b
relation decision(N:node, R:round, V:value) # got 2b from a quorum
relation configure_round_msg(R:round, C:config)
relation complete_msg(R:round) # message to the master that R is complete

relation complete_of(C:config, R:round) # replaced the function
axiom complete_of(C,R1) & complete_of(C,R2) -> R1 = R2 # immutable, so we can use axiom

# highest complete round known to the master (master state)
individual master_complete:round

function quorum_of_round(R:round) : quorum # local to propose

after init {
    one_a(R1,R2) := false;
    join_ack_msg(N,R1,R2,V) := false;
    left_rnd(N,R) := false;
    proposal(R,V) := false;
    vote(N,R,V) := false;
    decision(N,R,V) := false;
    configure_round_msg(R,C) := false;
    complete_msg(R) := false;
    assume le(master_complete, R);
}


# master actions

action configure_round(r:round, c:config) = {
    require ~configure_round_msg(r,C); # r isn't configured
    require le(master_complete, r);
    require complete_of(c,master_complete);
    configure_round_msg(r,c) := true
}

action mark_complete(r:round) = {
    require complete_msg(r);
    if ~le(r,master_complete) {
        master_complete := r;
    }
}

# nodes actions

action send_1a(r:round, c:config, cr:round) = {
    # a proposer selects a round r and sends a message asking nodes to join the round to all rounds strictly lower than r and higher than the complete round associated to c
    require configure_round_msg(r,c);
    require complete_of(c,cr);
    one_a(r,R) := one_a(r,R) | (le(cr,R) & ~le(r,R))
}

action join_round(n:node, r:round, rp:round, v:value) = {
    # receive 1a and answer with 1b
    require one_a(r,rp);
    require ~left_rnd(n,r);
    require ~(forall V:value . ~vote(n,rp,V)) -> vote(n,rp,v);

    if (forall V:value . ~vote(n,rp,V)) {
        join_ack_msg(n,r,rp,none) := true;
    } else {
        join_ack_msg(n,r,rp,v) := true;
    };
    # update derived relations
    left_rnd(n,R) := left_rnd(n,R) | ~le(r,R);
}


action propose(r:round, c:config, cr:round, maxr:round, v:value, w:value) = {
    quorum_of_round(R) := *;
    require configure_round_msg(r,c);
    require complete_of(c,cr);
    require ~proposal(r,V);
    require le(cr,R) & ~le(r,R) -> exists C. configure_round_msg(R,C); # relevant rounds must be configured
    require le(cr,R) & ~le(r,R) & configure_round_msg(R,C) -> quorumin(quorum_of_round(R),C); # quorum_of_round is in the right configs
    require le(cr,R) & ~le(r,R) & member(N, quorum_of_round(R)) -> exists V:value. join_ack_msg(N,r,R,V); # got messages from all quorums between cr and r

    # find the maximal maximal vote in the quorums
    # maxr, v = max { (r',v') | exists N. le(cr,r') & ~le(r,r') & member(N, quorum_of_round(r')) & join_ack_msg(N,r,r',v') & v' ~= none}
    require ((v = none & forall N:node,MAXR:round,V:value.
             ~(le(cr,MAXR) & ~le(r,MAXR) & member(N, quorum_of_round(MAXR)) & join_ack_msg(N,r,MAXR,V) & V ~= none)) |
            (v ~= none &
            (exists N:node. le(cr,maxr) & ~le(r,maxr) & member(N, quorum_of_round(maxr)) & join_ack_msg(N,r,maxr,v) & v ~= none) &
            (forall N:node,MAXR:round,V:value.
             (le(cr,MAXR) & ~le(r,MAXR) & member(N, quorum_of_round(MAXR)) & join_ack_msg(N,r,MAXR,V) & V ~= none) -> le(MAXR,maxr))
           ));
    require v = none -> w ~= none;
    if (v = none) {
      complete_msg(r) := true; # notify master in case r is complete
      proposal(r, w) := true;
    } else {
      # propose value v
      proposal(r, v) := true;
    };
}

action cast_vote(n:node, v:value, r:round) = {
    # receive a 2a and send a 2b
    require v ~= none;
    require ~left_rnd(n,r);
    require proposal(r, v);
    vote(n, r, v) := true
}

action decide(n:node, r:round, c:config, v:value, q:quorum) = {
    # get 2b from a quorum
    require v ~= none;
    require configure_round_msg(r,c);
    require quorumin(q,c);
    require member(N, q) -> vote(N, r, v);
    decision(n, r, v) := true;
    complete_msg(r) := true
}

export configure_round
export mark_complete
export send_1a
export join_round
export propose
export cast_vote
export decide

# safety property:
invariant [1000000] (decision(N1,R1,V1) & decision(N2,R2,V2)) -> V1 = V2
