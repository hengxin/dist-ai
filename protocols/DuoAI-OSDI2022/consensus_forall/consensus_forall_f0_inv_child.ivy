#lang ivy1.7

type node
type value
type quorum

relation member(N:node, Q:quorum)
axiom forall Q1:quorum, Q2:quorum. exists N:node. member(N, Q1) & member(N, Q2)

relation vote_request_msg(N0:node, N1:node)
relation voted(N:node)
relation vote_msg(N0:node, N1:node)
relation votes(N0:node, N1:node)
relation leader(N:node)
individual voting_quorum: quorum
relation decided(N:node, V:value)

after init  {
	vote_request_msg(N1, N2) := false;
	voted(N) := false;
	vote_msg(N1, N2) := false;
	votes(N1, N2) := false;
	leader(N1) := false;
	decided(N, V) := false;
}

action send_request_vote(src: node, dst: node) = {
	vote_request_msg(src, dst) := true;
}

action send_vote(src: node, dst: node, nondet:bool) = {
  require ~voted(src);
  require vote_request_msg(dst, src);
  
  vote_msg(src, dst) := true;
  voted(src) := true;
  vote_request_msg(src, dst) := nondet;
}

action recv_vote(n: node, sender: node) = {
  require vote_msg(sender, n);
  
  votes(n, sender) := true;
}

action choose_voting_quorum(q: quorum, sn: node) = {
  require forall N. member(N, q) -> votes(sn, N);
  require exists Q. forall Nv. member(Nv, Q) -> votes(sn, Nv);
  
  voting_quorum := q;
}

action become_leader(n: node) = {
  require member(N, voting_quorum) -> votes(n, N);
  
  leader(n) := true;
}

action decide(n: node, v: value) = {
  require leader(n);
  require ~decided(n, V);
  
  decided(n,v) := true;
}

export send_request_vote
export send_vote
export recv_vote
export choose_voting_quorum
export become_leader
export decide

# safety property:
invariant [1000000] decided(N1, V1) & decided(N2, V2) -> V1 = V2

#invariant [manual_1] leader(N1) & leader(N2) -> N1 = N2
#invariant [manual_2] votes(N, N1) -> vote_msg(N1, N)
#invariant [manual_3] vote_msg(N, N1) & vote_msg(N, N2) -> N1 = N2
#invariant [manual_4] vote_msg(N, N1) -> voted(N)
#invariant [manual_5] leader(N) & member(N1, voting_quorum) -> votes(N, N1)
#invariant [manual_6] decided(N, V) -> leader(N)

invariant [100] forall N1:node. forall V1:value. forall Q1:quorum. voted(N1) | ~votes(N1,N1)
invariant [101] forall N1:node. forall V1:value. forall Q1:quorum. voted(N1) | ~vote_msg(N1,N1)
invariant [102] forall N1:node. forall V1:value. forall Q1:quorum. leader(N1) | ~decided(N1,V1)
invariant [103] forall N1:node. forall V1:value. forall Q1:quorum. vote_msg(N1,N1) | ~votes(N1,N1)
invariant [104] forall N1:node. forall V1:value. forall Q1:quorum. voted(N1) | ~member(N1,Q1) | ~decided(N1,V1) | ~voting_quorum=Q1
invariant [105] forall N1:node. forall V1:value. forall Q1:quorum. voted(N1) | ~member(N1,Q1) | ~leader(N1) | ~voting_quorum=Q1
invariant [106] forall N1:node. forall V1:value. forall Q1:quorum. votes(N1,N1) | ~member(N1,Q1) | ~decided(N1,V1) | ~voting_quorum=Q1
invariant [107] forall N1:node. forall V1:value. forall Q1:quorum. votes(N1,N1) | ~member(N1,Q1) | ~leader(N1) | ~voting_quorum=Q1
invariant [200] forall N1:node. forall V1:value, V2:value. forall Q1:quorum. V1 ~= V2 -> ~decided(N1,V1) | ~decided(N1,V2)
invariant [300] forall N1:node, N2:node. forall V1:value. forall Q1:quorum. N1 ~= N2 -> vote_msg(N1,N2) | ~votes(N2,N1)
invariant [301] forall N1:node, N2:node. forall V1:value. forall Q1:quorum. N1 ~= N2 -> ~vote_msg(N1,N1) | ~vote_msg(N1,N2)
invariant [302] forall N1:node, N2:node. forall V1:value. forall Q1:quorum. N1 ~= N2 -> ~leader(N1) | ~leader(N2)
invariant [303] forall N1:node, N2:node. forall V1:value. forall Q1:quorum. N1 ~= N2 -> voted(N1) | ~vote_msg(N1,N2)
invariant [304] forall N1:node, N2:node. forall V1:value. forall Q1:quorum. N1 ~= N2 -> vote_request_msg(N1,N2) | vote_request_msg(N2,N1) | ~vote_msg(N1,N2)
invariant [305] forall N1:node, N2:node. forall V1:value. forall Q1:quorum. N1 ~= N2 -> vote_request_msg(N1,N2) | vote_msg(N1,N2) | ~vote_msg(N2,N1)
invariant [306] forall N1:node, N2:node. forall V1:value. forall Q1:quorum. N1 ~= N2 -> vote_request_msg(N1,N2) | ~vote_msg(N2,N1) | ~votes(N1,N1)
invariant [307] forall N1:node, N2:node. forall V1:value. forall Q1:quorum. N1 ~= N2 -> votes(N1,N2) | ~member(N2,Q1) | ~leader(N1) | ~voting_quorum=Q1
invariant [308] forall N1:node, N2:node. forall V1:value. forall Q1:quorum. N1 ~= N2 -> ~member(N2,Q1) | ~votes(N2,N2) | ~leader(N1) | ~voting_quorum=Q1
invariant [309] forall N1:node, N2:node. forall V1:value. forall Q1:quorum. N1 ~= N2 -> vote_msg(N1,N2) | ~member(N1,Q1) | ~leader(N2) | ~voting_quorum=Q1
invariant [310] forall N1:node, N2:node. forall V1:value. forall Q1:quorum. N1 ~= N2 -> ~member(N1,Q1) | ~vote_msg(N1,N2) | ~leader(N1) | ~voting_quorum=Q1
invariant [400] forall N1:node, N2:node. forall V1:value, V2:value. forall Q1:quorum. N1 ~= N2 & V1 ~= V2 -> ~decided(N1,V1) | ~decided(N2,V2)
invariant [500] forall N1:node, N2:node, N3:node. forall V1:value. forall Q1:quorum. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 ->  ~vote_msg(N1,N2) | ~vote_msg(N1,N3)
invariant [501] forall N1:node, N2:node, N3:node. forall V1:value. forall Q1:quorum. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 ->  ~votes(N1,N2) | ~votes(N3,N2)
