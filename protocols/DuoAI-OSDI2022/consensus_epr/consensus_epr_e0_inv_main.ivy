#lang ivy1.7

type value
type quorum
type node

relation member(N:node, Q:quorum)
axiom forall Q1, Q2. exists N. member(N, Q1) & member(N, Q2)

relation vote_request_msg(N:node, M:node)
relation voted(N:node)
relation vote_msg(N:node, M:node)
relation votes(N:node, M:node)
relation leader(N:node)
relation decided(N:node, V:value)

after init {
    vote_request_msg(N1, N2)  := false;
    voted(N) := false;
    vote_msg(N1, N2) := false;
    votes(N1, N2) := false;
    leader(N1) := false;
    decided(N, V) := false;

}

action send_request_vote(src: node, dst: node) = {
    vote_request_msg(src, dst) := true;
}

action send_vote(src: node, dst: node ) = {
    require ((~voted(src)) & ((vote_request_msg(dst, src))));
    vote_msg(src, dst) := true;
    voted(src) := true;
}

action send_vote_mark_false(src: node, dst: node ) = {
    require ((~voted(src)) & ((vote_request_msg(dst, src))));
    vote_msg(src, dst) := true;
    voted(src) := true;
    vote_request_msg(dst, src) := false;
}

action recv_vote(n: node, sender: node ) = {
    require (vote_msg(sender, n));
    votes(n, sender) := true;
}

action become_leader(n: node, q: quorum ) = {
    require (member(N, q) -> (votes(n, N)));
    leader(n) := true;
}

action decide(n: node, v: value ) = {
    require ((leader(n)) & ~(decided(n, V)));
    decided(n, v) := true;
}

export send_request_vote
export send_vote
export send_vote_mark_false
export recv_vote
export become_leader
export decide

# safety property
invariant [1000000] decided(N1, V1) & decided(N2, V2) -> V1 = V2

invariant [100] forall V1:value. forall Q1:quorum. forall N1:node. leader(N1) | ~decided(N1,V1)
invariant [101] forall V1:value. forall Q1:quorum. forall N1:node. vote_msg(N1,N1) | ~votes(N1,N1)
invariant [102] forall V1:value. forall Q1:quorum. forall N1:node. voted(N1) | ~votes(N1,N1)
invariant [103] forall V1:value. forall Q1:quorum. forall N1:node. voted(N1) | ~vote_msg(N1,N1)
invariant [104] forall V1:value. forall Q1:quorum. exists N1:node. (member(N1,Q1) & votes(N1,N1)) | (member(N1,Q1) & ~leader(N1))
invariant [105] forall V1:value. forall Q1:quorum. exists N1:node. (member(N1,Q1) & votes(N1,N1)) | (~votes(N1,N1) & ~leader(N1))
invariant [106] forall V1:value. forall Q1:quorum. exists N1:node. (member(N1,Q1) & leader(N1)) | (member(N1,Q1) & ~decided(N1,V1))
invariant [107] forall V1:value. forall Q1:quorum. exists N1:node. (member(N1,Q1) & vote_msg(N1,N1)) | (~vote_msg(N1,N1) & ~leader(N1))
invariant [108] forall V1:value. forall Q1:quorum. exists N1:node. (member(N1,Q1) & vote_msg(N1,N1)) | (member(N1,Q1) & ~votes(N1,N1))
invariant [109] forall V1:value. forall Q1:quorum. exists N1:node. (member(N1,Q1) & ~decided(N1,V1)) | (votes(N1,N1) & decided(N1,V1))
invariant [110] forall V1:value. forall Q1:quorum. exists N1:node. (member(N1,Q1) & ~leader(N1)) | (votes(N1,N1) & leader(N1))
invariant [111] forall V1:value. forall Q1:quorum. exists N1:node. (member(N1,Q1) & voted(N1)) | (~voted(N1) & ~leader(N1))
invariant [112] forall V1:value. forall Q1:quorum. exists N1:node. (member(N1,Q1) & voted(N1)) | (member(N1,Q1) & ~vote_msg(N1,N1))
invariant [113] forall V1:value. exists Q1:quorum. forall N1:node. votes(N1,N1) | ~member(N1,Q1) | ~leader(N1)
invariant [200] forall V1:value. forall Q1:quorum. forall N1:node, N2:node. N1 ~= N2 -> vote_msg(N1,N2) | ~votes(N2,N1)
invariant [201] forall V1:value. forall Q1:quorum. forall N1:node, N2:node. N1 ~= N2 -> ~vote_msg(N1,N1) | ~vote_msg(N1,N2)
invariant [202] forall V1:value. forall Q1:quorum. forall N1:node, N2:node. N1 ~= N2 -> voted(N1) | ~vote_msg(N1,N2)
invariant [203] forall V1:value. forall Q1:quorum. forall N1:node, N2:node. N1 ~= N2 -> ~leader(N1) | ~leader(N2)
invariant [204] forall V1:value. exists Q1:quorum. forall N1:node, N2:node. votes(N1,N2) | ~member(N2,Q1) | ~leader(N1)
invariant [300] forall V1:value, V2:value. forall Q1:quorum. forall N1:node. V1 ~= V2 -> ~decided(N1,V1) | ~decided(N1,V2)
invariant [301] forall V1:value, V2:value. forall Q1:quorum. exists N1:node. V1 ~= V2 -> (member(N1,Q1) & votes(N1,N1)) | (~decided(N1,V1) & ~decided(N1,V2))
invariant [302] forall V1:value, V2:value. forall Q1:quorum. exists N1:node. V1 ~= V2 -> (member(N1,Q1) & ~decided(N1,V2)) | (votes(N1,N1) & ~decided(N1,V1))
invariant [303] forall V1:value, V2:value. forall Q1:quorum. exists N1:node. V1 ~= V2 -> (member(N1,Q1) & ~decided(N1,V1)) | (member(N1,Q1) & ~decided(N1,V2))
invariant [304] forall V1:value, V2:value. forall Q1:quorum. exists N1:node. V1 ~= V2 -> (member(N1,Q1) & ~decided(N1,V1) & ~decided(N1,V2)) | votes(N1,N1)
invariant [400] forall V1:value, V2:value. forall Q1:quorum. forall N1:node, N2:node. V1 ~= V2 & N1 ~= N2 -> ~decided(N1,V1) | ~decided(N2,V2)
invariant [500] forall V1:value. forall Q1:quorum. forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 ->  ~vote_msg(N1,N2) | ~vote_msg(N1,N3)
invariant [501] forall V1:value. forall Q1:quorum. forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 ->  ~votes(N1,N2) | ~votes(N3,N2)
