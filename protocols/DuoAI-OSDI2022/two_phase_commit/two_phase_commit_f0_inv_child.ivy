#lang ivy1.7

################################################################################
#
# Types, relations and functions describing state of the network
#
################################################################################

type node

relation vote_yes(N: node)
relation vote_no(N: node)
relation alive(N: node)
relation go_commit(N: node)
relation go_abort(N: node)
relation decide_commit(N: node)
relation decide_abort(N: node)

individual abort_flag: bool

################################################################################
#
# Protocol description
#
################################################################################

after init {
    vote_yes(N) := false;
    vote_no(N) := false;
    alive(N) := true;
    go_commit(N) := false;
    go_abort(N) := false;
    decide_commit(N) := false;
    decide_abort(N) := false;
    abort_flag := false;
}

action vote1(n: node) = {
    require alive(n);
    require ~vote_no(n);
    require ~decide_commit(n);
    require ~decide_abort(n);
    vote_yes(n) := true;
}

action vote2(n: node) = {
    require alive(n);
    require ~vote_yes(n);
    require ~decide_commit(n);
    require ~decide_abort(n);
    vote_no(n) := true;
    abort_flag := true;
    decide_abort(n) := true;
}

action fail(n: node) = {
    require alive(n);
    alive(n) := false;
    abort_flag := true;
}

action go1 = {
    require ~go_commit(N);
    require ~go_abort(N);
    require vote_yes(N);
    go_commit(N) := true;
}

action go2 = {
    require ~go_commit(N);
    require ~go_abort(N);
    require exists N. vote_no(N) | ~alive(N);
    go_abort(N) := true;
}

action commit(n: node) = {
    require alive(n);
    require go_commit(n);
    decide_commit(n) := true;
}

action abort(n: node) = {
    require alive(n);
    require go_abort(n);
    decide_abort(n) := true;
}

export vote1
export vote2
export fail
export go1
export go2
export commit
export abort

# the safety property
invariant [1000000] (decide_commit(N0) -> ~decide_abort(N1)) & (decide_commit(N0) -> vote_yes(N1)) & (decide_abort(N0) -> abort_flag)

invariant [100] forall N1:node. abort_flag | ~go_abort(N1)
invariant [101] forall N1:node. ~go_abort(N1) | ~decide_commit(N1)
invariant [102] forall N1:node. ~go_commit(N1) | ~decide_abort(N1)
invariant [103] forall N1:node. ~vote_yes(N1) | ~vote_no(N1)
invariant [104] forall N1:node. ~go_commit(N1) | ~go_abort(N1)
invariant [105] forall N1:node. ~decide_commit(N1) | ~decide_abort(N1)
invariant [106] forall N1:node. abort_flag | ~decide_abort(N1)
invariant [107] forall N1:node. ~vote_no(N1) | ~go_commit(N1)
invariant [108] forall N1:node. alive(N1) | abort_flag
invariant [109] forall N1:node. go_commit(N1) | ~decide_commit(N1)
invariant [110] forall N1:node. vote_yes(N1) | ~decide_commit(N1)
invariant [111] forall N1:node. ~vote_no(N1) | ~decide_commit(N1)
invariant [112] forall N1:node. abort_flag | ~vote_no(N1)
invariant [113] forall N1:node. decide_abort(N1) | ~vote_no(N1)
invariant [114] forall N1:node. vote_yes(N1) | ~go_commit(N1)
invariant [115] forall N1:node. vote_no(N1) | go_abort(N1) | ~decide_abort(N1)
invariant [200] forall N1:node, N2:node. N1 ~= N2 -> go_abort(N2) | ~go_abort(N1)
invariant [201] forall N1:node, N2:node. N1 ~= N2 -> go_commit(N2) | ~go_commit(N1)
invariant [202] forall N1:node, N2:node. N1 ~= N2 -> vote_no(N1) | go_abort(N2) | ~decide_abort(N1)
