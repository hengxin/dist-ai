#lang ivy1.7

type db_request_id
type node
type response
type request

relation match(R:request, Q:response)

relation request_sent(N:node, R:request)
relation response_sent(N:node, R:response)
relation response_received(N:node, R:response)

relation db_request_sent(I:db_request_id, R:request)
relation db_response_sent(I:db_request_id, R:response)

relation t(I:db_request_id, N:node)

after init {
    request_sent(N,R) := false;
    response_sent(N,P) := false;
    response_received(N,P)  := false;
    db_request_sent(I, R) := false;
    db_response_sent(I,P) := false;
    t(I,N) := false;
}

action new_request(n:node, r:request ) = {
    request_sent(n,r) := true;
}

action server_process_request(n:node, r:request, i:db_request_id ) = {
    require (request_sent(n,r));
    require (forall N. ~(t(i,N)));
    t(i,n) := true;
    db_request_sent(i,r) := true;
}

action db_process_request(i:db_request_id, r:request, p:response ) = {
    require (db_request_sent(i,r));
    require (match(r,p));
    db_response_sent(i, p) := true;
}

action server_process_db_response(n:node, i:db_request_id, p:response ) = {
    require (db_response_sent(i,p));
    require (t(i,n));
    response_sent(n, p) := true;
}

action receive_response(n:node, p:response ) = {
    require (response_sent(n,p));
    response_received(n, p) := true;
}

export new_request
export server_process_request
export db_process_request
export server_process_db_response
export receive_response

# safety property
invariant [1000000] forall N,P. response_received(N,P) -> exists R. request_sent(N,R) & match(R,P)
