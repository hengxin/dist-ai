#lang ivy1.7

type node
type quorum

relation member(N:node, Q:quorum)
axiom forall Q1, Q2. exists N. member(N, Q1) & member(N, Q2)

relation vote_request_msg(N0:node, N1:node)
relation voted(N:node)
relation vote_msg(N0:node, N1:node)
relation votes(N0:node, N1:node)
relation leader(N:node)
individual voting_quorum: quorum

after init  {
	vote_request_msg(N1, N2) := false;
	voted(N) := false;
	vote_msg(N1, N2) := false;
	votes(N1, N2) := false;
	leader(N1) := false;
}

action send_request_vote(src: node, dst: node) = {
	vote_request_msg(src, dst) := true;
}

action send_vote(src: node, dst: node, nondet:bool) = {
  require ~voted(src);
  require vote_request_msg(dst, src);

  vote_msg(src, dst) := true;
  voted(src) := true;
  vote_request_msg(src, dst) := nondet;
}

action recv_vote(n: node, sender: node) = {
  require vote_msg(sender, n);

  votes(n, sender) := true;
}

action choose_voting_quorum(q: quorum, sn: node) = {
  require forall N. member(N, q) -> votes(sn, N);
  require exists Q. forall Nv. member(Nv, Q) -> votes(sn, Nv);

  voting_quorum := q;
}

action become_leader(n: node) = {
  require member(N, voting_quorum) -> votes(n, N);

  leader(n) := true;
}

export send_request_vote
export send_vote
export recv_vote
export choose_voting_quorum
export become_leader

# safety property:
invariant [1000000] leader(N1) & leader(N2) -> N1 = N2

#invariant [manual_1] votes(N, N1) -> vote_msg(N1, N)
#invariant [manual_2] vote_msg(N, N1) & vote_msg(N, N2) -> N1 = N2
#invariant [manual_3] vote_msg(N, N1) -> voted(N)
#invariant [manual_4] leader(N) & member(N1, voting_quorum) -> votes(N, N1)
invariant [100] forall N1:node. forall Q1:quorum. vote_msg(N1,N1) | ~votes(N1,N1)
invariant [101] forall N1:node. forall Q1:quorum. voted(N1) | ~votes(N1,N1)
invariant [102] forall N1:node. forall Q1:quorum. voted(N1) | ~vote_msg(N1,N1)
invariant [103] forall N1:node. forall Q1:quorum. votes(N1,N1) | ~member(N1,Q1) | ~leader(N1) | ~voting_quorum=Q1
invariant [200] forall N1:node, N2:node. forall Q1:quorum. N1 ~= N2 -> vote_msg(N1,N2) | ~votes(N2,N1)
invariant [201] forall N1:node, N2:node. forall Q1:quorum. N1 ~= N2 -> ~vote_msg(N1,N1) | ~vote_msg(N1,N2)
invariant [202] forall N1:node, N2:node. forall Q1:quorum. N1 ~= N2 -> ~leader(N1) | ~leader(N2)
invariant [203] forall N1:node, N2:node. forall Q1:quorum. N1 ~= N2 -> voted(N1) | ~vote_msg(N1,N2)
invariant [204] forall N1:node, N2:node. forall Q1:quorum. N1 ~= N2 -> vote_request_msg(N1,N2) | vote_request_msg(N2,N1) | ~vote_msg(N1,N2)
invariant [205] forall N1:node, N2:node. forall Q1:quorum. N1 ~= N2 -> vote_request_msg(N1,N2) | vote_msg(N1,N2) | ~vote_msg(N2,N1)
invariant [206] forall N1:node, N2:node. forall Q1:quorum. N1 ~= N2 -> vote_request_msg(N1,N2) | ~vote_msg(N2,N1) | ~votes(N1,N1)
invariant [207] forall N1:node, N2:node. forall Q1:quorum. N1 ~= N2 -> vote_msg(N1,N2) | ~member(N1,Q1) | ~leader(N2) | ~voting_quorum=Q1
invariant [208] forall N1:node, N2:node. forall Q1:quorum. N1 ~= N2 -> ~member(N1,Q1) | ~vote_msg(N1,N2) | ~leader(N1) | ~voting_quorum=Q1
invariant [209] forall N1:node, N2:node. forall Q1:quorum. N1 ~= N2 -> ~member(N2,Q1) | ~votes(N2,N2) | ~leader(N1) | ~voting_quorum=Q1
invariant [210] forall N1:node, N2:node. forall Q1:quorum. N1 ~= N2 -> votes(N1,N2) | ~member(N2,Q1) | ~leader(N1) | ~voting_quorum=Q1
invariant [300] forall N1:node, N2:node, N3:node. forall Q1:quorum. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 ->  ~vote_msg(N1,N2) | ~vote_msg(N1,N3)
invariant [301] forall N1:node, N2:node, N3:node. forall Q1:quorum. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 ->  ~votes(N1,N2) | ~votes(N3,N2)
