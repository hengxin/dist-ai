#lang ivy1.7

type key
type value
type node

relation table(N:node, K:key, V:value)
relation owner(N:node, K:key)
relation transfer_msg(N:node, K:key, V:value)

after init {
    table(N, K, V) := false;
    transfer_msg(N, K, V) := false;
    assume(owner(N1, K) & owner(N2, K) -> N1 = N2);
#    assume(forall K. exists N. owner(N, K));
}

action reshard(k: key, v: value, n_old: node, n_new: node) = {
    require table(n_old, k, v);

    table(n_old, k, v) := false;
    owner(n_old, k) := false;
    transfer_msg(n_new, k, v) := true;
}

action recv_transfer_msg(n: node, k: key, v: value) = {
    require transfer_msg(n, k, v);

    transfer_msg(n, k, v) := false;
    table(n, k, v) := true;
    owner(n, k) := true;
}

action put(n: node, k: key, v: value) = {
    require owner(n, k);

    table(n, k, V) := (V = v);
}

export reshard
export recv_transfer_msg
export put

invariant [1000000] table(N1, K, V1) & table(N2, K, V2) -> N1 = N2 & V1 = V2

#invariant [help_1] owner(N1, K) & owner(N2, K) -> N1 = N2
#invariant [help_2] table(N, K, V) -> owner(N, K)

#invariant [help_3] ~(transfer_msg(N1, K, V) & owner(N2, K))
#invariant [help_4] transfer_msg(N1, K, V1) & transfer_msg(N2, K, V2) -> N1 = N2 & V1 = V2
invariant [100] forall K1:key. forall V1:value. forall N1:node. owner(N1,K1) | ~table(N1,K1,V1)
invariant [101] forall K1:key. forall V1:value. forall N1:node. ~table(N1,K1,V1) | ~transfer_msg(N1,K1,V1)
invariant [102] forall K1:key. forall V1:value. forall N1:node. ~owner(N1,K1) | ~transfer_msg(N1,K1,V1)
invariant [200] forall K1:key. forall V1:value. forall N1:node, N2:node. N1 ~= N2 -> ~owner(N1,K1) | ~owner(N2,K1)
invariant [201] forall K1:key. forall V1:value. forall N1:node, N2:node. N1 ~= N2 -> ~owner(N1,K1) | ~transfer_msg(N2,K1,V1)
invariant [202] forall K1:key. forall V1:value. forall N1:node, N2:node. N1 ~= N2 -> ~transfer_msg(N1,K1,V1) | ~transfer_msg(N2,K1,V1)
invariant [300] forall K1:key. forall V1:value, V2:value. forall N1:node. V1 ~= V2 -> ~table(N1,K1,V1) | ~table(N1,K1,V2)
invariant [301] forall K1:key. forall V1:value, V2:value. forall N1:node. V1 ~= V2 -> ~transfer_msg(N1,K1,V1) | ~transfer_msg(N1,K1,V2)
invariant [302] forall K1:key. forall V1:value, V2:value. forall N1:node. V1 ~= V2 -> ~table(N1,K1,V2) | ~transfer_msg(N1,K1,V1)
invariant [400] forall K1:key. forall V1:value, V2:value. forall N1:node, N2:node. V1 ~= V2 & N1 ~= N2 -> ~transfer_msg(N1,K1,V1) | ~transfer_msg(N2,K1,V2)
invariant [401] forall K1:key. forall V1:value, V2:value. forall N1:node, N2:node. V1 ~= V2 & N1 ~= N2 -> ~table(N1,K1,V1) | ~transfer_msg(N2,K1,V2)
invariant [402] forall K1:key. forall V1:value, V2:value. forall N1:node, N2:node. V1 ~= V2 & N1 ~= N2 -> ~table(N1,K1,V2) | ~table(N2,K1,V1)
