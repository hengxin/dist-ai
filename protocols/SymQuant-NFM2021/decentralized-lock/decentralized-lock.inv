### Proof certificate: #12
invariant [ic3po_prop1]	(forall X, Y . ((has_lock(X) & has_lock(Y)) -> (X = Y)))
invariant [ic3po_other2]	(forall N2, N1 . ((msg(N2, max) & msg(N1, max)) -> (N2 = N1)))
invariant [ic3po_other6]	(forall N1, N2, T1 . ((msg(N1, T1) & msg(N2, T1)) -> (le(T1, epoch(N1)) | le(epoch(N1), epoch(N2)))))
invariant [ic3po_other11]	(forall T1, N2, N1, T2 . (((epoch(N2) = epoch(N1)) & msg(N1, T1) & msg(N2, T2)) -> (le(T2, epoch(N1)) | le(T1, T2))))
invariant [ic3po_other10]	(forall T2, T1, N2, N1 . ((msg(N1, T2) & msg(N2, T1)) -> (le(T2, epoch(N1)) | le(epoch(N1), epoch(N2)) | le(T1, T2))))
invariant [ic3po_other7]	(forall T1, N2, N1 . (((epoch(N1) = epoch(N2)) & msg(N2, T1) & msg(N1, T1)) -> ((N2 = N1) | le(T1, epoch(N2)))))
invariant [ic3po_other8]	(forall N2, N1, T1, T2 . ((msg(N1, T1) & msg(N2, T2)) -> (le(T1, epoch(N2)) | le(epoch(N2), epoch(N1)) | le(T2, T1))))
invariant [ic3po_other9]	(forall N2, N1, T1, T2 . ((msg(N2, T1) & msg(N1, T2)) -> (le(T1, epoch(N2)) | le(epoch(N1), T1) | le(T2, epoch(N1)))))
invariant [ic3po_other4]	(forall T1, N1, N2 . ((msg(N2, T1) & msg(N1, max)) -> ((T1 = max) | le(T1, epoch(N2)))))
invariant [ic3po_other3]	(forall N2, T1, N1 . ((has_lock(N1) & msg(N2, T1)) -> le(T1, epoch(N2))))
invariant [ic3po_other5]	(forall T1, N2, N1 . ((msg(N1, T1) & msg(N2, epoch(N1))) -> (le(epoch(N1), epoch(N2)) | le(T1, epoch(N1)))))
invariant [ic3po_other1]	(forall N2, N1 . ((has_lock(N2) & msg(N1, max)) -> (N2 = N1)))
###
