(declare-sort acceptor 0)
(declare-sort ballot 0)
(declare-sort quorum 0)
(declare-sort value 0)

(define-fun .acceptor ((S acceptor)) acceptor (! S :sort 3))
(define-fun .ballot ((S ballot)) ballot (! S :sort 4))
(define-fun .quorum ((S quorum)) quorum (! S :sort 3))
(define-fun .value ((S value)) value (! S :sort 2))

(declare-fun __chosen (value) Bool)
(declare-fun __chosenAt (ballot value) Bool)
(declare-fun __isSafeAt (ballot value) Bool)
(declare-fun __maxBal (acceptor) ballot)
(declare-fun __showsSafeAt (quorum ballot value) Bool)
(declare-fun __votes (acceptor ballot value) Bool)

(declare-fun chosen (value) Bool)
(declare-fun chosenAt (ballot value) Bool)
(declare-fun isSafeAt (ballot value) Bool)
(declare-fun maxBal (acceptor) ballot)
(declare-fun showsSafeAt (quorum ballot value) Bool)
(declare-fun votes (acceptor ballot value) Bool)

(define-fun .chosen ((V0 value)) Bool (! (__chosen V0) :next chosen))
(define-fun .chosenAt ((V0 ballot) (V1 value)) Bool (! (__chosenAt V0 V1) :next chosenAt))
(define-fun .isSafeAt ((V0 ballot) (V1 value)) Bool (! (__isSafeAt V0 V1) :next isSafeAt))
(define-fun .maxBal ((V0 acceptor)) ballot (! (__maxBal V0) :next maxBal))
(define-fun .showsSafeAt ((V0 quorum) (V1 ballot) (V2 value)) Bool (! (__showsSafeAt V0 V1 V2) :next showsSafeAt))
(define-fun .votes ((V0 acceptor) (V1 ballot) (V2 value)) Bool (! (__votes V0 V1 V2) :next votes))

(declare-fun le (ballot ballot) Bool)
(declare-fun max () ballot)
(declare-fun member (acceptor quorum) Bool)
(declare-fun negone () ballot)

(define-fun .le ((V0 ballot) (V1 ballot)) Bool (! (le V0 V1) :global true))
(define-fun .max () ballot (! max :global true))
(define-fun .member ((V0 acceptor) (V1 quorum)) Bool (! (member V0 V1) :global true))
(define-fun .negone () ballot (! negone :global true))

(define-fun .def___chosen () Bool (! 
 (let (($v (forall ((V0 value)) (= (__chosen V0) (exists ((B ballot)) (__chosenAt B V0))))
 ))
 (and $v))
 :definition __chosen))

(define-fun .def___chosenAt () Bool (! 
 (let (($v (forall ((V0 ballot) (V1 value)) (= (__chosenAt V0 V1) (exists ((Q quorum)) (forall ((A acceptor)) (=> (member A Q) (__votes A V0 V1))))))
 ))
 (and $v))
 :definition __chosenAt))

(define-fun .def___isSafeAt () Bool (! 
 (let (($v (forall ((V0 ballot) (V1 value)) (= (__isSafeAt V0 V1) (exists ((Q quorum)) (__showsSafeAt Q V0 V1))))
 ))
 (and $v))
 :definition __isSafeAt))

(define-fun .def___showsSafeAt () Bool (! 
 (let (($v (forall ((V0 quorum) (V1 ballot) (V2 value)) (= (__showsSafeAt V0 V1 V2) (and (forall ((A acceptor)) (=> (member A V0) (le V1 (__maxBal A)))) (exists ((C ballot)) (and (not (le V1 C)) (=> (not (= C negone)) (exists ((A acceptor)) (and (member A V0) (__votes A C V2)))) (forall ((D ballot)) (=> (and (not (le D C)) (not (le V1 D))) (forall ((A acceptor)) (=> (member A V0) (forall ((Vd value)) (not (__votes A D Vd))))))))))))
 ))
 (and $v))
 :definition __showsSafeAt))

(define-fun .def_chosen () Bool (! 
 (let (($v (forall ((V0 value)) (= (chosen V0) (exists ((B ballot)) (chosenAt B V0))))
 ))
 (and $v))
 :definition chosen))

(define-fun .def_chosenAt () Bool (! 
 (let (($v (forall ((V0 ballot) (V1 value)) (= (chosenAt V0 V1) (exists ((Q quorum)) (forall ((A acceptor)) (=> (member A Q) (votes A V0 V1))))))
 ))
 (and $v))
 :definition chosenAt))

(define-fun .def_isSafeAt () Bool (! 
 (let (($v (forall ((V0 ballot) (V1 value)) (= (isSafeAt V0 V1) (exists ((Q quorum)) (showsSafeAt Q V0 V1))))
 ))
 (and $v))
 :definition isSafeAt))

(define-fun .def_showsSafeAt () Bool (! 
 (let (($v (forall ((V0 quorum) (V1 ballot) (V2 value)) (= (showsSafeAt V0 V1 V2) (and (forall ((A acceptor)) (=> (member A V0) (le V1 (maxBal A)))) (exists ((C ballot)) (and (not (le V1 C)) (=> (not (= C negone)) (exists ((A acceptor)) (and (member A V0) (votes A C V2)))) (forall ((D ballot)) (=> (and (not (le D C)) (not (le V1 D))) (forall ((A acceptor)) (=> (member A V0) (forall ((Vd value)) (not (votes A D Vd))))))))))))
 ))
 (and $v))
 :definition showsSafeAt))

(define-fun .prop () Bool (! 
 (let (($v (forall ((V1 value) (V2 value)) (=> (and (__chosen V1) (__chosen V2)) (= V1 V2)))
 ))
 (and $v))
 :invar-property 0))

(define-fun .axiom () Bool (! 
 (let (($v (and (forall ((X ballot)) (le X X)) (forall ((X ballot) (Y ballot) (Z ballot)) (=> (and (le X Y) (le Y Z)) (le X Z))) (forall ((X ballot) (Y ballot)) (=> (and (le X Y) (le Y X)) (= X Y))) (forall ((X ballot) (Y ballot)) (or (le X Y) (le Y X))) (forall ((X ballot)) (le negone X)) (forall ((X ballot)) (le X max)) (forall ((Q1 quorum) (Q2 quorum)) (exists ((A acceptor)) (and (member A Q1) (member A Q2)))))
 ))
 (and $v))
 :axiom true))

(define-fun .init () Bool (! 
 (let (($v (and (forall ((V0 acceptor) (V1 ballot) (V2 value)) (= (__votes V0 V1 V2) false)) (forall ((V0 acceptor)) (= (__maxBal V0) negone)))
 ))
 (and $v))
 :init true))

(define-fun .action_ext:increaseMaxBal () Bool (! 
 (let (($v (exists ((V__fml:a acceptor) (V__fml:b ballot)) (and (forall ((V0 acceptor)) (= (maxBal V0) (ite (= V0 V__fml:a) V__fml:b (__maxBal V0)))) (not (= V__fml:b negone)) (not (le V__fml:b (__maxBal V__fml:a)))))
 ))
 (and $v))
 :action ext:increaseMaxBal))

(define-fun .action_ext:voteFor () Bool (! 
 (let (($v (exists ((V__fml:a acceptor) (V__fml:b ballot) (V__fml:v value)) (and (forall ((V0 acceptor) (V1 ballot) (V2 value)) (= (votes V0 V1 V2) (ite (and (= V0 V__fml:a) (= V1 V__fml:b) (= V2 V__fml:v)) true (__votes V0 V1 V2)))) (forall ((V0 acceptor)) (= (maxBal V0) (ite (= V0 V__fml:a) V__fml:b (__maxBal V0)))) (not (= V__fml:b negone)) (le (__maxBal V__fml:a) V__fml:b) (forall ((V value)) (not (__votes V__fml:a V__fml:b V))) (forall ((C acceptor)) (=> (not (= C V__fml:a)) (forall ((V value)) (=> (__votes C V__fml:b V) (= V V__fml:v))))) (__isSafeAt V__fml:b V__fml:v)))
 ))
 (and $v))
 :action ext:voteFor))

